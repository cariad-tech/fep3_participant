<?xml version="1.0"?>
<!--
  Copyright @ 2021 VW Group. All rights reserved.
  
      This Source Code Form is subject to the terms of the Mozilla
      Public License, v. 2.0. If a copy of the MPL was not distributed
      with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
  
  If it is not possible or desirable to put the notice in a particular file, then
  You may include the notice in a location (such as a LICENSE file in a
  relevant directory) where a recipient would be likely to look for such a notice.
  
  You may add additional accurate notices of copyright ownership.
  
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/6.0.1/rti_dds_qos_profiles.xsd"
    version="6.0.1">
    <qos_library name="fep3">
        <qos_profile name="participant" is_default_qos="true">
            <participant_factory_qos>
                <logging>
                    <output_file>fep3_connext_rti_simulation_bus_log.txt</output_file>
                    <verbosity>WARNING</verbosity>
                    <category>ALL</category>
                    <print_format>TIMESTAMPED</print_format>
                </logging>
            </participant_factory_qos>
            <participant_qos base_name="BuiltinQosLib::Generic.Participant.LargeData">
                <resource_limits>
                    <participant_user_data_max_length>2048</participant_user_data_max_length>
                </resource_limits>
                <property>
                    <value>
                        <!-- To use the monitoring tool -->
                        <!--<element>
                            <name>rti.monitor.library</name>
                            <value>rtimonitoring</value>
                        </element>
                        <element>
                            <name>rti.monitor.create_function</name>
                            <value>RTIDefaultMonitor_create</value>
                        </element>-->
                        <!-- Use build in type as unbounded sequence -->
                        <element>
                          <name>dds.builtin_type.octets.max_size</name>
                          <value>2147483647</value>
                        </element>
                    </value>
                </property>
                <database>
                    <shutdown_cleanup_period>
                        <sec>0</sec>
                        <nanosec>50000000</nanosec>
                    </shutdown_cleanup_period>
                </database>
            </participant_qos>
            <publisher_qos>
                <presentation>
                    <ordered_access>true</ordered_access>
                    <access_scope>GROUP_PRESENTATION_QOS</access_scope>
                </presentation>
            </publisher_qos>
            <subscriber_qos>
                <presentation>
                    <ordered_access>true</ordered_access>
                    <access_scope>GROUP_PRESENTATION_QOS</access_scope>
                </presentation>
            </subscriber_qos>
        </qos_profile>
        <qos_profile name="largedata"
            base_name="BuiltinQosLibExp::Generic.StrictReliable.LargeData.FastFlow">
            <datawriter_qos>
                <property>
                    <value>
                        <element>
                            <name>dds.data_writer.history.memory_manager.fast_pool.pool_buffer_max_size</name>
                            <value>100000</value>
                        </element>
                    </value>
                </property>
                <durability>
                    <kind>VOLATILE_DURABILITY_QOS</kind>
                </durability>
                <resource_limits>
                    <max_samples>100</max_samples>
                </resource_limits>
            </datawriter_qos>
            <datareader_qos>
                <durability>
                    <kind>VOLATILE_DURABILITY_QOS</kind>
                </durability>
                <resource_limits>
                    <max_samples>100</max_samples>
                </resource_limits>
            </datareader_qos>
        </qos_profile>
        <qos_profile name="smalldata"
            base_name="BuiltinQosLibExp::Generic.StrictReliable">
            <datawriter_qos>
                <property>
                    <value>
                        <element>
                            <name>dds.data_writer.history.memory_manager.fast_pool.pool_buffer_max_size</name>
                            <value>100000</value>
                        </element>
                    </value>
                </property>
                <durability>
                    <kind>VOLATILE_DURABILITY_QOS</kind>
                </durability>
            </datawriter_qos>
            <datareader_qos>
                <durability>
                    <kind>VOLATILE_DURABILITY_QOS</kind>
                </durability>
            </datareader_qos>
        </qos_profile>

        <!-- QOS of predefined StreamTypes -->
        <!-- types with ending _big will be choosed when we need fragmentation -->
        <qos_profile name="video"
            base_name="largedata">
        </qos_profile>
        <qos_profile name="audio"
            base_name="largedata">
        </qos_profile>
        <qos_profile name="raw"
            base_name="largedata">
        </qos_profile>
        <qos_profile name="anonymous"
            base_name="largedata">
        </qos_profile>
        <qos_profile name="plain-ctype"
            base_name="smalldata">
        </qos_profile>
        <qos_profile name="plain-array-ctype"
            base_name="smalldata">
        </qos_profile>
        <qos_profile name="plain-array-ctype_big"
            base_name="largedata">
        </qos_profile>
        <qos_profile name="ascii-string"
            base_name="smalldata">
        </qos_profile>
        <qos_profile name="ascii-string_big"
            base_name="largedata">
        </qos_profile>
        <qos_profile name="ddl"
            base_name="smalldata">
        </qos_profile>
        <qos_profile name="ddl_big"
            base_name="largedata">
        </qos_profile>
        <qos_profile name="ddl-fileref"
            base_name="smalldata">
        </qos_profile>
        <qos_profile name="ddl-fileref_big"
            base_name="largedata">
        </qos_profile>
        <qos_profile name="ddl-array"
            base_name="smalldata">
        </qos_profile>
        <qos_profile name="ddl-array_big"
            base_name="largedata">
        </qos_profile>
        <qos_profile name="ddl-fileref-array"
            base_name="smalldata">
        </qos_profile>
        <qos_profile name="ddl-fileref-array_big"
            base_name="largedata">
        </qos_profile>
        <qos_profile name="default_profile"
            base_name="smalldata">
        </qos_profile>
        <qos_profile name="default_profile_big"
            base_name="largedata">
        </qos_profile>

        <!-- QOS of StreamType topic -->
        <qos_profile name="stream_type"
            base_name="BuiltinQosLibExp::Generic.StrictReliable">
            <datawriter_qos>
                <property>
                    <value>
                        <element>
                            <name>dds.data_writer.history.memory_manager.fast_pool.pool_buffer_max_size</name>
                            <value>100000</value>
                        </element>
                    </value>
                </property>
                <history>
                    <kind>KEEP_ALL_HISTORY_QOS</kind>
                </history>
                <durability>
                    <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind>
                </durability>
            </datawriter_qos>
            <datareader_qos>
                <history>
                    <kind>KEEP_ALL_HISTORY_QOS</kind>
                </history>
                <durability>
                    <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind>
                </durability>
            </datareader_qos>

        </qos_profile>

    </qos_library>
</dds>
